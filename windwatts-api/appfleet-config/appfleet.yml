---
appfleet_version: 2.2.0

project_handle: windwatts
app_name: api
data_class: low
framework_type: python

git_source:
  host: github.com
  owner: NREL
  repo: dw-tap-api
  branch: dev/frontend-appfleet
  path: /dev/frontend-appfleet

tags:
  billingId: "210125"
  org: windwatts
  owner: dwhitesi

releases:
  - dev
  - stage
  - prod

host_name:
  $release_name:
    prod: ${self.project_handle}-${self.app_name}-${release_name}.stratus.nrel.gov
    stage: ${self.project_handle}-${self.app_name}-${release_name}.stratus.nrel.gov
    dev: ${self.project_handle}-${self.app_name}-${release_name}.stratus.nrel.gov

target_groups:
  - name: ${self.project_handle}-${self.app_name}-${release_name}
    load_balancer:
      $release_name:
        dev: alb-int-low05-dev
        stage: alb-int-low05-stage
        prod: alb-ext-low05-prod
    container_name: nginx
    container_port: 80
    port: 80
    protocol: HTTP
    protocol_version: HTTP1
    sticky: true
    sticky_duration: 86400
    target_type: instance
    healthcheck:
      path: /healthcheck
      port: traffic-port
      protocol: HTTP
      interval: 10
      timeout: 5
      threshold_healthy: 2
      threshold_unhealthy: 3
      http_healthy_status: "200,400"

ecs_service:
  name: ${self.project_handle}-${self.app_name}-${release_name}
  task_role: ${self.project_handle}-${self.app_name}-ecstask-iam-role
  grace_period: 300
  task_execution_role: nrel-ops-ecs-generic-task-execution-role
  launch_type: EC2
  cluster:
    $release_name:
      dev: ecs-low01-dev
      stage: ecs-low01-stage
      prod: ecs-low
  deployment_config:
    circuit_breaker:
      enable: true
      rollback: true
    maximum_percent:
      $release_name:
        prod: 200
        stage: 100
        dev: 100
    minimum_healthy_percent:
      $release_name:
        prod: 50
        stage: 0
        dev: 0
  replicas:
    $release_name:
      dev: 1
      stage: 2
      prod: 2

volumes: []

containers:
  - name: nginx
    image:
      $release_name:
        dev: 991404956194.dkr.ecr.us-west-2.amazonaws.com/nrel-split-nginx-dev
        stage: 991404956194.dkr.ecr.us-west-2.amazonaws.com/nrel-split-nginx-stage
        prod: 991404956194.dkr.ecr.us-west-2.amazonaws.com/nrel-split-nginx
    framework_default: python.nginx
    healthcheck:
      command:
        - "CMD-SHELL"
        - "curl -f http://localhost/ || exit 1"
      interval: 30
      retries: 3
      timeout: 5
      grace_period: 10
    cpu:
      $release_name:
        dev: 64
        stage: 64
        prod: 128
    memory:
      $release_name:
        dev: 32
        stage: 32
        prod: 64
    links:
      - main
    port_map:
      - "80:80"
    volume_mounts: []
    ssm_parameters:
      - /nrel/${self.project_handle}-${self.app_name}/${release_name}/

  - name: main
    image:
      $release_name:
        dev: 991404956194.dkr.ecr.us-west-2.amazonaws.com/nrel-${self.project_handle}-${self.app_name}-dev
        stage: 991404956194.dkr.ecr.us-west-2.amazonaws.com/nrel-${self.project_handle}-${self.app_name}-stage
        prod: 991404956194.dkr.ecr.us-west-2.amazonaws.com/nrel-${self.project_handle}-${self.app_name}-prod
    framework_default: python.nginx
    healthcheck:
      command:
        - "CMD-SHELL"
        - "curl -f http://localhost:8000/healthcheck || exit 1"
      interval: 30
      retries: 3
      timeout: 5
      grace_period: 10
    ssm_parameters:
      - /nrel/${self.project_handle}-${self.app_name}/${release_name}/
    cpu:
      $release_name:
        dev: 128
        stage: 128
        prod: 256
    memory:
      $release_name:
        dev: 64
        stage: 64
        prod: 128
    port_map:
      - "8000:8000"
    volume_mounts: []
    secrets: []
    command: "gunicorn -w 1 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 app.main:app"
    environment: {}
    depends_on: []
